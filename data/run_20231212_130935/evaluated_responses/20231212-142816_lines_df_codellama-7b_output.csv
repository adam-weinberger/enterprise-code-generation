path,path_in_code_repo,prompt,label,line_to_remove_index,last_line_to_remove_index,completion,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
data/run_20231212_130935/test/78_IntInput.java,../kestra/core/src/main/java/io/kestra/core/models/flows/input/IntInput.java,"<PRE> package io.kestra.core.models.flows.input;

import io.kestra.core.models.flows.Input;
import io.kestra.core.models.validations.ManualConstraintViolation;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

import java.util.Set;
import javax.validation.ConstraintViolationException;

@SuperBuilder
@Getter
@NoArgsConstructor
public class IntInput extends Input<Integer> {
    @Schema(title = ""Minimal value."")
    Integer min;

    @Schema(title = ""Maximal value."")
    Integer max;

    @Override
    public void validate(Integer input) throws ConstraintViolationException {
        if (min != null && input.compareTo(min) < 0) {
            throw new ConstraintViolationException(""Invalid input '"" + input + ""', it must be more than '"" + min + ""'"",
                Set.of(ManualConstraintViolation.of(
                    ""Invalid input"",
                    this,
                    IntInput.class,
                    getName(),
 <SUF>        }

        if (max != null && input.compareTo(max) > 0) {
            throw new ConstraintViolationException(""Invalid input '"" + input + ""', it must be less than '"" + max + ""'"",
                Set.of(ManualConstraintViolation.of(
                    ""Invalid input"",
                    this,
                    IntInput.class,
                    getName(),
                    input
                )));
        }
    }
}
 <MID>","                    input
                )));
",32,33,"                   input
                )));",1.0,1.0,1.0,1.0,0.0
data/run_20231212_130935/test/117_JdbcHeartbeat.java,../kestra/jdbc/src/main/java/io/kestra/jdbc/runner/JdbcHeartbeat.java,"<PRE> package io.kestra.jdbc.runner;


import io.kestra.core.runners.Worker;
import io.kestra.core.runners.WorkerInstance;
import io.kestra.jdbc.repository.AbstractJdbcWorkerInstanceRepository;
import io.micronaut.context.ApplicationContext;
import io.micronaut.context.annotation.Requires;
import io.micronaut.context.env.Environment;
import io.micronaut.scheduling.annotation.Scheduled;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import lombok.extern.slf4j.Slf4j;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.UUID;

@Singleton
@JdbcRunnerEnabled
@Requires(property = ""kestra.server-type"", pattern = ""(WORKER|STANDALONE)"")
@Slf4j
public class JdbcHeartbeat {
    private static final String HOSTNAME;

    static {
        try {
            HOSTNAME = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            throw new RuntimeException(e);
        }
    }

    @Inject
    AbstractJdbcWorkerInstanceRepository workerInstanceRepository;

    private volatile WorkerInstance workerInstance;

    private final ApplicationContext applicationContext;

    public JdbcHeartbeat(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    private void registerWorkerInstance(Worker worker)  {
        synchronized (this) {
 <SUF>                    .workerUuid(UUID.randomUUID())
                    .hostname(HOSTNAME)
                    .port(applicationContext.getEnvironment().getProperty(""micronaut.server.port"", Integer.class).orElse(8080))
                    .managementPort(applicationContext.getEnvironment().getProperty(""endpoints.all.port"", Integer.class).orElse(8081))
                    .workerGroup(worker.getWorkerGroup())
                    .build();

                if (log.isDebugEnabled()) {
                    log.debug(""Registered WorkerInstance of: {}"", workerInstance.getWorkerUuid());
                }

                this.workerInstanceRepository.save(workerInstance);
            }
        }
    }

    @Scheduled(fixedDelay = ""${kestra.heartbeat.frequency}"")
    public void updateHeartbeat() {
        if (applicationContext.containsBean(Worker.class) && !applicationContext.getEnvironment().getActiveNames().contains(Environment.TEST)) {
            if (workerInstance == null) {
                registerWorkerInstance(applicationContext.getBean(Worker.class));
            }

            if (log.isTraceEnabled()) {
                log.error(""Heartbeat of: {}"", workerInstance.getWorkerUuid());
            }

            if (workerInstanceRepository.heartbeatCheckUp(workerInstance.getWorkerUuid().toString()).isEmpty()) {
                log.error(""heartbeatCheckUp failed, unable to find current instance '{}', Shutting down now!"", workerInstance.getWorkerUuid());
                Runtime.getRuntime().exit(1);
            }
        }
    }

    public WorkerInstance get()  {
        if (workerInstance == null) {
            registerWorkerInstance(applicationContext.getBean(Worker.class));
        }

        return workerInstance;
    }
} <MID>","            if (workerInstance == null) {
                this.workerInstance = WorkerInstance.builder()
",47,48,"           if (workerInstance == null) {
                workerInstance = WorkerInstance.builder()",0.7594424465002316,0.7497153770440844,0.7166258375282708,0.5714285714285714,1.0
data/run_20231212_130935/test/75_Execution.java,../kestra/core/src/main/java/io/kestra/core/models/executions/Execution.java,"<PRE>             return Optional.empty();
        }

        return this.taskRunList
            .stream()
            .filter(t -> t.getState().isRunning())
            .findFirst();
    }

    public Optional<TaskRun> findLastNotTerminated() {
        if (this.taskRunList == null) {
            return Optional.empty();
        }

        return Streams.findLast(this.taskRunList
            .stream()
            .filter(t -> !t.getState().isTerminated() || !t.getState().isPaused())
        );
    }

    public Optional<TaskRun> findLastByState(List<TaskRun> taskRuns, State.Type state) {
        return Streams.findLast(taskRuns
            .stream()
            .filter(t -> t.getState().getCurrent() == state)
        );
    }

    public Optional<TaskRun> findLastCreated(List<TaskRun> taskRuns) {
        return Streams.findLast(taskRuns
            .stream()
            .filter(t -> t.getState().isCreated())
        );
    }

    public Optional<TaskRun> findLastRunning(List<TaskRun> taskRuns) {
        return Streams.findLast(taskRuns
            .stream()
            .filter(t -> t.getState().isRunning())
        );
    }

    public Optional<TaskRun> findLastTerminated(List<TaskRun> taskRuns) {
        return Streams.findLast(taskRuns
            .stream()
            .filter(t -> t.getState().isTerminated())
        );
    }

    public boolean isTerminated(List<ResolvedTask> resolvedTasks) {
        return this.isTerminated(resolvedTasks, null);
 <SUF>    public boolean isTerminated(List<ResolvedTask> resolvedTasks, TaskRun parentTaskRun) {
        long terminatedCount = this
            .findTaskRunByTasks(resolvedTasks, parentTaskRun)
            .stream()
            .filter(taskRun -> taskRun.getState().isTerminated())
            .count();

        return terminatedCount == resolvedTasks.size();
    }

    public boolean hasWarning() {
        return this.taskRunList != null && this.taskRunList
            .stream()
            .anyMatch(taskRun -> taskRun.getState().getCurrent() == State.Type.WARNING);
    }

    public boolean hasWarning(List<ResolvedTask> resolvedTasks) {
        return this.hasWarning(resolvedTasks, null);
    }

    public boolean hasWarning(List<ResolvedTask> resolvedTasks, TaskRun parentTaskRun) {
        return this.findTaskRunByTasks(resolvedTasks, parentTaskRun)
            .stream()
            .anyMatch(taskRun -> taskRun.getState().getCurrent() == State.Type.WARNING);
    }

    public boolean hasFailed() {
        return this.taskRunList != null && this.taskRunList
            .stream()
            .anyMatch(taskRun -> taskRun.getState().isFailed());
    }

    public boolean hasFailed(List<ResolvedTask> resolvedTasks) {
        return this.hasFailed(resolvedTasks, null);
    }

    public boolean hasFailed(List<ResolvedTask> resolvedTasks, TaskRun parentTaskRun) {
        return this.findTaskRunByTasks(resolvedTasks, parentTaskRun)
            .stream()
            .anyMatch(taskRun -> taskRun.getState().isFailed());
    }

    public boolean hasCreated() {
        return this.taskRunList != null && this.taskRunList
            .stream()
            .anyMatch(taskRun -> taskRun.getState().isCreated());
    }

    public boolean hasCreated(List<ResolvedTask> resolvedTasks) {
        return this.hasCreated(resolvedTasks, null);
 <MID>","    }

",345,346,"   }

    public boolean isTerminated(List<ResolvedTask> resolvedTasks, TaskRun parentTaskRun) {
        return this.isTerminated(resolvedTasks, parentTaskRun, null);
    }

    public boolean isTerminated(List<ResolvedTask> resolvedTasks, TaskRun parentTaskRun, TaskRun lastTaskRun) {
        if (lastTaskRun == null) {
            return this.isTerminated(resolvedTasks, parentTaskRun);
        }

        return this.findTaskRunByTasks(resolvedTasks, parentTaskRun)
            .stream()
            .filter(taskRun -> taskRun.getId() != lastTaskRun.getId())
            .allMatch(taskRun -> taskRun.getState().isTerminated());
    }
",0.40513994143067167,0.0016390542224145178,0.11892071150027214,0.5,0.0
data/run_20231212_130935/test/74_TimeBetweenCondition.java,../kestra/core/src/main/java/io/kestra/core/models/conditions/types/TimeBetweenCondition.java,"<PRE> @ToString
@EqualsAndHashCode
@Getter
@NoArgsConstructor
@Schema(
    title = ""Condition to allows events between two specific time""
)
@Plugin(
    examples = {
        @Example(
            full = true,
            code = {
                ""- conditions:"",
                ""    - type: io.kestra.core.models.conditions.types.TimeBetweenCondition"",
                ""      after: \""16:19:12+02:00\"""",
            }
        )
    }
)
public class TimeBetweenCondition extends Condition implements ScheduleCondition {
    @NotNull
    @Schema(
        title = ""The time to test"",
        description = ""Can be any variable or any valid ISO 8601 time, default will use `{{ now(format='iso_offset_time') }}`""
    )
    @Builder.Default
    @PluginProperty(dynamic = true)
    private final String date = ""{{ now(format='iso_offset_time') }}"";

    @Schema(
        title = ""The time to test must be after this one"",
        description = ""Must be a valid ISO 8601 time with offset""
    )
    @PluginProperty
    private OffsetTime after;

    @Schema(
        title = ""The time to test must be before this one"",
        description = ""Must be a valid ISO 8601 time with offset""
    )
    @PluginProperty
    private OffsetTime before;

    @Override
    public boolean test(ConditionContext conditionContext) throws InternalException {
        String render = conditionContext.getRunContext().render(date, conditionContext.getVariables());
        OffsetTime currentDate = DateUtils.parseOffsetTime(render);

        if (this.before != null && this.after != null) {
            return currentDate.isAfter(after) && currentDate.isBefore(before);
 <SUF>        } else if (this.after != null) {
            return currentDate.isAfter(after);
        } else {
            throw new IllegalConditionEvaluation(""Invalid condition with no before nor after"");
        }
    }
}
 <MID>","        } else if (this.before != null) {
            return currentDate.isBefore(before);
",70,71,"       } else if (this.before != null) {
            return currentDate.isBefore(before);",1.0,1.0,1.0,1.0,1.0
data/run_20231212_130935/test/45_EachSequential.java,../kestra/core/src/main/java/io/kestra/core/tasks/flows/EachSequential.java,"<PRE>                 ""    type: io.kestra.core.tasks.debugs.Return"",
                ""    format: \""{{ task.id }} with current value '{{ taskrun.value }}'\"""",
            }
        ),
    }
)
public class EachSequential extends Sequential implements FlowableTask<VoidOutput> {
    @NotNull
    @PluginProperty(dynamic = true)
    @Schema(
        title = ""The list of values for this task"",
        description = ""The value car be passed as a String, a list of String, or a list of objects"",
        anyOf = {String.class, Object[].class}
    )
    private Object value;

    @Override
    public GraphCluster tasksTree(Execution execution, TaskRun taskRun, List<String> parentValues) throws IllegalVariableEvaluationException {
        GraphCluster subGraph = new GraphCluster(this, taskRun, parentValues, RelationType.DYNAMIC);

        GraphUtils.sequential(
            subGraph,
            this.getTasks(),
            this.errors,
            taskRun,
            execution
        );

        return subGraph;
    }

    @Override
    public List<ResolvedTask> childTasks(RunContext runContext, TaskRun parentTaskRun) throws IllegalVariableEvaluationException {
        return FlowableUtils.resolveEachTasks(runContext, parentTaskRun, this.getTasks(), this.value);
    }

    @Override
    public Optional<State.Type> resolveState(RunContext runContext, Execution execution, TaskRun parentTaskRun) throws IllegalVariableEvaluationException {
        List<ResolvedTask> childTasks = this.childTasks(runContext, parentTaskRun);

        if (childTasks.isEmpty()) {
            return Optional.of(State.Type.SUCCESS);
        }

        return FlowableUtils.resolveState(
            execution,
            childTasks,
            FlowableUtils.resolveTasks(this.getErrors(), parentTaskRun),
            parentTaskRun,
            runContext,
 <SUF>    }

    @Override
    public List<NextTaskRun> resolveNexts(RunContext runContext, Execution execution, TaskRun parentTaskRun) throws IllegalVariableEvaluationException {
        return FlowableUtils.resolveSequentialNexts(
            execution,
            FlowableUtils.resolveEachTasks(runContext, parentTaskRun, this.getTasks(), this.value),
            FlowableUtils.resolveTasks(this.errors, parentTaskRun),
            parentTaskRun
        );
    }
}
 <MID>","            this.isAllowFailure()
        );
",115,116,"           this.getId()
        );",0.7462728306172344,0.488923022434901,0.49616830003403634,1.0,0.0
data/run_20231212_130935/test/20_Fetch.java,../kestra/core/src/main/java/io/kestra/core/tasks/log/Fetch.java,"<PRE> package io.kestra.core.tasks.log;

import io.kestra.core.models.annotations.Example;
import io.kestra.core.models.annotations.Plugin;
import io.kestra.core.models.annotations.PluginProperty;
import io.kestra.core.models.tasks.RunnableTask;
import io.kestra.core.models.tasks.Task;
import io.kestra.core.repositories.LogRepositoryInterface;
import io.kestra.core.runners.RunContext;
import io.kestra.core.serializers.FileSerde;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import lombok.experimental.SuperBuilder;
import org.slf4j.event.Level;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.net.URI;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

import static io.kestra.core.utils.Rethrow.throwConsumer;

@SuperBuilder
@ToString
@EqualsAndHashCode
@Getter
@NoArgsConstructor
@Schema(
    title = ""Fetch execution logs and store them in a file."",
    description = ""This task is useful to automate moving logs between various systems and environments""
)
@Plugin(
    examples = {
        @Example(
            code = {
                ""level: INFO"",
                ""executionId: \""{{trigger.executionId}}\""""
            }
        ),
        @Example(
            code = {
                ""level: WARN"",
                ""executionId: \""{{execution.id}}\"""",
                ""tasksId: "",
 <SUF>        )
    }
)
public class Fetch extends Task implements RunnableTask<Fetch.Output> {
    @Schema(
        title = ""Filter for a specific execution"",
        description = ""If not set, the task will use the ID of the current execution.""
    )
    @PluginProperty(dynamic = true)
    private String executionId;

    @Schema(
        title = ""Filter for one or more task(s)""
    )
    @PluginProperty
    private Collection<String> tasksId;

    @Schema(
        title = ""The lowest log level that you want to fetch""
    )
    @Builder.Default
    @PluginProperty
    private Level level = Level.INFO;

    @SuppressWarnings(""unchecked"")
    @Override
    public Output run(RunContext runContext) throws Exception {
        String executionId = this.executionId != null ? runContext.render(this.executionId) : (String) new HashMap<>((Map<String, Object>) runContext.getVariables().get(""execution"")).get(""id"");
        LogRepositoryInterface logRepository = runContext.getApplicationContext().getBean(LogRepositoryInterface.class);

        File tempFile = runContext.tempFile("".ion"").toFile();
        AtomicLong count = new AtomicLong();

        Map<String, String> flowVars = (Map<String, String>) runContext.getVariables().get(""flow"");
        String tenantId = flowVars.get(""tenantId"");

        try (OutputStream output = new FileOutputStream(tempFile)) {
            if (this.tasksId != null) {
                for (String taskId : tasksId) {
                    logRepository
                        .findByExecutionIdAndTaskId(tenantId, executionId, taskId, level)
                        .forEach(throwConsumer(log -> {
                            count.incrementAndGet();
                            FileSerde.write(output, log);
                        }));
                }
            } else {
                logRepository
                    .findByExecutionId(tenantId, executionId, level)
                    .forEach(throwConsumer(log -> {
 <MID>","                ""  - \""previous_task_id\""""
            }
",49,50,"               ""tasksId: \""{{tasks.id}}\""""
     <EOT>",0.3333333333333333,0.0,0.0,0.3333333333333333,0.0
data/run_20231212_130935/test/88_EditorController.java,../kestra/webserver/src/main/java/io/kestra/webserver/controllers/EditorController.java,"<PRE> package io.kestra.webserver.controllers;

import io.kestra.webserver.controllers.domain.MarketplaceRequestType;
import io.kestra.webserver.services.MarketplaceRequestMapper;
import io.micronaut.core.async.publisher.Publishers;
import io.micronaut.http.*;
import io.micronaut.http.annotation.*;
import io.micronaut.http.client.HttpClient;
import io.micronaut.http.client.annotation.Client;
import io.micronaut.http.server.util.HttpHostResolver;
import io.micronaut.scheduling.TaskExecutors;
import io.micronaut.scheduling.annotation.ExecuteOn;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import jakarta.inject.Inject;
import org.reactivestreams.Publisher;

import javax.annotation.Nullable;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Optional;

@Controller(""/api/v1/editor"")
public class EditorController {
    @Inject
    @Client(""remote-api"")
    private HttpClient httpClient;

    @Inject
    private HttpHostResolver httpHostResolver;

    @Inject
    private MarketplaceRequestMapper marketplaceRequestMapper;

    @ExecuteOn(TaskExecutors.IO)
    @Get(uri = ""/marketplace/{type}{/path:/.*}"", produces = MediaType.APPLICATION_JSON)
    @Operation(tags = {""Marketplace""}, summary = ""Marketplace extensions operations"")
    public HttpResponse<String> marketplaceGet(
        @Parameter(description = ""Type of request"") @PathVariable MarketplaceRequestType type,
        @Parameter(description = ""Additional path"") @PathVariable @Nullable String path
 <SUF>        return null;
    }

    @ExecuteOn(TaskExecutors.IO)
    @Post(uri = ""/marketplace/{type}{/path:/.*}"", consumes = MediaType.APPLICATION_JSON, produces = MediaType.APPLICATION_JSON)
    @Operation(tags = {""Marketplace""}, summary = ""Marketplace extensions operations"")
    public HttpResponse<String> marketplacePost(
        @Parameter(description = ""Type of request"") @PathVariable MarketplaceRequestType type,
        @Parameter(description = ""Additional path"") @PathVariable @Nullable String path
    ) throws URISyntaxException {
        // proxied
        return null;
    }

    @ExecuteOn(TaskExecutors.IO)
    @Get(uri = ""/marketplace/resource/{publisher}/{extension}/{version}{/path:/.*}"")
    @Operation(tags = {""Marketplace""}, summary = ""Marketplace extensions resources operations"")
    public Publisher<HttpResponse<String>> marketplaceResource(
        @Parameter(description = ""Publisher id"") @PathVariable String publisher,
        @Parameter(description = ""Extension name"") @PathVariable String extension,
        @Parameter(description = ""Extension version"") @PathVariable String version,
        @Parameter(description = ""Path of the resource"") @PathVariable String path,
        HttpRequest<?> httpRequest
    ) {
        String localhost = httpHostResolver.resolve(httpRequest);
        String resourceBaseUrl = marketplaceRequestMapper.resourceBaseUrl(publisher);

        return Publishers.map(
            httpClient.exchange(
                httpRequest.mutate()
                    .uri(URI.create(resourceBaseUrl + ""/"" + publisher + ""/"" + extension + ""/"" + version + path))
                    .headers(headers -> headers.set(""Host"", resourceBaseUrl.replaceFirst(""https?://([^/]*).*"", ""$1"").toLowerCase())),
                String.class
            ), response -> {
                String body = response.body();
                if (body == null) {
                    return response;
                }

                MutableHttpResponse<String> newResponse = HttpResponse.ok(
                    path.equals(""/extension"")
                        ? body.replace(resourceBaseUrl, localhost + ""/api/v1/editor/marketplace/resource"")
                        : body
                );
                return Optional.ofNullable(response.header(""Content-Type""))
                    .map(contentType -> newResponse.header(""Content-Type"", contentType))
                    .orElse(newResponse);
            }
        );
    }
 <MID>","    ) {
        // proxied
",41,42,"   ) throws URISyntaxException {
        // proxied",0.3092414088644366,0.09554427922043669,0.14142135623730953,0.0,0.0
data/run_20231212_130935/test/62_YamlFlowParser.java,../kestra/core/src/main/java/io/kestra/core/serializers/YamlFlowParser.java,"<PRE>         }
    }

    private <T> T readFlow(ObjectMapper mapper, String input, Class<T> objectClass, String resource) {
        try {
            return mapper.readValue(input, objectClass);
        } catch (JsonProcessingException e) {
            jsonProcessingExceptionHandler(input, resource, e);
        }

        return null;
    }

    @SuppressWarnings(""unchecked"")
    private static <T> void jsonProcessingExceptionHandler(T target, String resource, JsonProcessingException e) throws ConstraintViolationException {
        if (e.getCause() instanceof ConstraintViolationException constraintViolationException) {
            throw constraintViolationException;
        }
        else if (e instanceof InvalidTypeIdException invalidTypeIdException) {
            // This error is thrown when a non-existing task is used
            throw new ConstraintViolationException(
                ""Invalid type: "" + invalidTypeIdException.getTypeId(),
                Set.of(
                    ManualConstraintViolation.of(
                        ""Invalid type: "" + invalidTypeIdException.getTypeId(),
                        target,
                        (Class<T>) target.getClass(),
                        invalidTypeIdException.getPathReference(),
                        null
                    ),
                    ManualConstraintViolation.of(
                        e.getMessage(),
                        target,
                        (Class<T>) target.getClass(),
                        invalidTypeIdException.getPathReference(),
                        null
                    )
                )
            );
        }
        else if (e instanceof UnrecognizedPropertyException unrecognizedPropertyException) {
            var message = unrecognizedPropertyException.getOriginalMessage() + unrecognizedPropertyException.getMessageSuffix();
            throw new ConstraintViolationException(
                message,
                Collections.singleton(
                    ManualConstraintViolation.of(
                        e.getCause() == null ? message : message + ""\nCaused by: "" + e.getCause().getMessage(),
                        target,
                        (Class<T>) target.getClass(),
                        unrecognizedPropertyException.getPathReference(),
 <SUF>                ));
        }
        else {
            throw new ConstraintViolationException(
                ""Illegal ""+ resource +"" yaml: "" + e.getMessage(),
                Collections.singleton(
                    ManualConstraintViolation.of(
                        e.getCause() == null ? e.getMessage() : e.getMessage() + ""\nCaused by: "" + e.getCause().getMessage(),
                        target,
                        (Class<T>) target.getClass(),
                        ""flow"",
                        null
                    )
                )
            );
        }
    }
}

 <MID>","                        null
                    )
",145,146,"                       null
                    )",0.6419286129883564,0.316227766016838,0.25148668593658713,1.0,0.0
data/run_20231212_130935/test/80_JdbcQueueIndexer.java,../kestra/jdbc/src/main/java/io/kestra/jdbc/runner/JdbcQueueIndexer.java,"<PRE> package io.kestra.jdbc.runner;

import io.kestra.core.metrics.MetricRegistry;
import io.micronaut.context.ApplicationContext;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import lombok.extern.slf4j.Slf4j;
import org.jooq.DSLContext;

import java.lang.reflect.ParameterizedType;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Singleton
public class JdbcQueueIndexer {
    private final Map<Class<?>, JdbcIndexerInterface<?>> repositories = new HashMap<>();

    private final MetricRegistry metricRegistry;

    @Inject
    public JdbcQueueIndexer(ApplicationContext applicationContext) {
        applicationContext.getBeansOfType(JdbcIndexerInterface.class)
            .forEach(saveRepositoryInterface -> {
                String typeName = ((ParameterizedType) ((Class<?>) saveRepositoryInterface.getClass()
                    .getGenericSuperclass()).getGenericInterfaces()[1]).getActualTypeArguments()[0].getTypeName();

                try {
                    repositories.put(Class.forName(typeName), saveRepositoryInterface);
                } catch (ClassNotFoundException e) {
                    throw new RuntimeException(e);
                }
            });

        this.metricRegistry = applicationContext.getBean(MetricRegistry.class);
    }

    public void accept(DSLContext context, Object item) {
        if (repositories.containsKey(item.getClass())) {
            this.metricRegistry.counter(MetricRegistry.METRIC_INDEXER_REQUEST_COUNT, ""type"", item.getClass().getName()).increment();
            this.metricRegistry.counter(MetricRegistry.METRIC_INDEXER_MESSAGE_IN_COUNT, ""type"", item.getClass().getName()).increment();

            this.metricRegistry.timer(MetricRegistry.METRIC_INDEXER_REQUEST_DURATION, ""type"", item.getClass().getName()).record(() -> {
                repositories.get(item.getClass()).save(context, cast(item));

                this.metricRegistry.counter(MetricRegistry.METRIC_INDEXER_MESSAGE_OUT_COUNT, ""type"", item.getClass().getName()).increment();
            });

        }
 <SUF>    @SuppressWarnings(""unchecked"")
    protected static <T> T cast(Object message) {
        return (T) message;
    }
}
 <MID>","    }

",50,51,"   }
",0.5553941064735807,0.1778279410038923,0.04374848489043043,1.0,0.0
data/run_20231212_130935/test/46_AbstractJdbcLogRepository.java,../kestra/jdbc/src/main/java/io/kestra/jdbc/repository/AbstractJdbcLogRepository.java,"<PRE>             pageable
        );
    }

    @Override
    public List<LogEntry> findByExecutionIdAndTaskId(String tenantId, String executionId, String taskId, Level minLevel) {
        return this.query(
            tenantId,
            field(""execution_id"").eq(executionId)
                .and(field(""task_id"").eq(taskId)),
            minLevel
        );
    }
    @Override
    public ArrayListTotal<LogEntry> findByExecutionIdAndTaskId(String tenantId, String executionId, String taskId, Level minLevel, Pageable pageable) {
        return this.query(
            tenantId,
            field(""execution_id"").eq(executionId)
                .and(field(""task_id"").eq(taskId)),
            minLevel,
            pageable
        );
    }

    @Override
    public List<LogEntry> findByExecutionIdAndTaskRunId(String tenantId, String executionId, String taskRunId, Level minLevel) {
        return this.query(
            tenantId,
            field(""execution_id"").eq(executionId)
                .and(field(""taskrun_id"").eq(taskRunId)),
            minLevel
        );
    }

    @Override
    public ArrayListTotal<LogEntry> findByExecutionIdAndTaskRunId(String tenantId, String executionId, String taskRunId, Level minLevel, Pageable pageable) {
        return this.query(
            tenantId,
            field(""execution_id"").eq(executionId)
                .and(field(""taskrun_id"").eq(taskRunId)),
            minLevel,
            pageable
        );
    }

    @Override
    public List<LogEntry> findByExecutionIdAndTaskRunIdAndAttempt(String tenantId, String executionId, String taskRunId, Level minLevel, Integer attempt) {
        return this.query(
            tenantId,
            field(""execution_id"").eq(executionId)
 <SUF>            minLevel
        );
    }

    @Override
    public ArrayListTotal<LogEntry> findByExecutionIdAndTaskRunIdAndAttempt(String tenantId, String executionId, String taskRunId, Level minLevel, Integer attempt, Pageable pageable) {
        return this.query(
            tenantId,
            field(""execution_id"").eq(executionId)
                .and(field(""taskrun_id"").eq(taskRunId))
                .and(field(""attempt_number"").eq(attempt)),
            minLevel,
            pageable
        );
    }

    @Override
    public LogEntry save(LogEntry log) {
        Map<Field<Object>, Object> fields = this.jdbcRepository.persistFields(log);
        this.jdbcRepository.persist(log, fields);

        return log;
    }

    @Override
    public Integer purge(Execution execution) {
        return this.jdbcRepository
            .getDslContextWrapper()
            .transactionResult(configuration -> {
                DSLContext context = DSL.using(configuration);

                return context.delete(this.jdbcRepository.getTable())
                    .where(field(""execution_id"", String.class).eq(execution.getId()))
                    .execute();
            });
    }

    @Override
    public LogEntry save(DSLContext dslContext, LogEntry logEntry) {
        Map<Field<Object>, Object> fields = this.jdbcRepository.persistFields(logEntry);
        this.jdbcRepository.persist(logEntry, dslContext, fields);

        return logEntry;
    }

    private ArrayListTotal<LogEntry> query(String tenantId, Condition condition, Level minLevel, Pageable pageable) {
        return this.jdbcRepository
            .getDslContextWrapper()
            .transactionResult(configuration -> {
                DSLContext context = DSL.using(configuration);
 <MID>","                .and(field(""taskrun_id"").eq(taskRunId))
                .and(field(""attempt_number"").eq(attempt)),
",143,144,"               .and(field(""taskrun_id"").eq(taskRunId))
                .and(field(""attempt_number"").eq(attempt)),",1.0,1.0,1.0,1.0,1.0
