path,path_in_snap_repo,prompt,label,start_line,end_line,completion,codebleu,ngram_match_score,weighted_ngram_match_score,syntax_match_score,dataflow_match_score
data/run_20231212_130935/test/28_LogRepositoryInterface.java,../kestra/core/src/main/java/io/kestra/core/repositories/LogRepositoryInterface.java,"<PRE> package io.kestra.core.repositories;

import io.kestra.core.models.executions.Execution;
import io.kestra.core.models.executions.LogEntry;
import io.micronaut.data.model.Pageable;
import org.slf4j.event.Level;

import javax.annotation.Nullable;
import java.time.ZonedDateTime;
import java.util.List;

public interface LogRepositoryInterface extends SaveRepositoryInterface<LogEntry> {
    List<LogEntry> findByExecutionId(String tenantId, String executionId, Level minLevel);

    ArrayListTotal<LogEntry> findByExecutionId(String tenantId, String executionId, Level minLevel, Pageable pageable);

    List<LogEntry> findByExecutionIdAndTaskId(String tenantId, String executionId, String taskId, Level minLevel);

    ArrayListTotal<LogEntry> findByExecutionIdAndTaskId(String tenantId, String executionId, String taskId, Level minLevel, Pageable pageable);

    List<LogEntry> findByExecutionIdAndTaskRunId(String tenantId, String executionId, String taskRunId, Level minLevel);

    ArrayListTotal<LogEntry> findByExecutionIdAndTaskRunId(String tenantId, String executionId, String taskRunId, Level minLevel, Pageable pageable);

    List<LogEntry> findByExecutionIdAndTaskRunIdAndAttempt(String tenantId, String executionId, String taskRunId, Level minLevel, Integer attempt);

    ArrayListTotal<LogEntry> findByExecutionIdAndTaskRunIdAndAttempt(String tenantId, String executionId, String taskRunId, Level minLevel <SUF> attempt, Pageable pageable);

    ArrayListTotal<LogEntry> find(
        Pageable pageable,
        @Nullable String query,
        @Nullable String tenantId,
        @Nullable String namespace,
        @Nullable String flowId,
        @Nullable Level minLevel,
        @Nullable ZonedDateTime startDate,
        @Nullable ZonedDateTime endDate
    );


    LogEntry save(LogEntry log);

    Integer purge(Execution execution);
}
 <MID>",", Integer",27,27,", Integer attempt, Pageable pageable);

    List<LogEntry> findByExecutionIdAndTaskRunIdAndAttemptAndLevel(String tenantId, String executionId, String taskRunId, Level minLevel, Integer attempt);

    ArrayListTotal<LogEntry> findByExecutionIdAndTaskRunIdAndAttemptAndLevel(String tenantId, String executionId, String taskRunId, Level minLevel, Integer <EOT>",0.4397338126736743,0.007448564758110005,0.25148668593658713,0.5,0.0
data/run_20231212_130935/test/82_FlowService.java,../kestra/core/src/main/java/io/kestra/core/services/FlowService.java,"<PRE> 
    @Inject
    YamlFlowParser yamlFlowParser;

    @Inject
    TaskDefaultService taskDefaultService;

    @Inject
    ApplicationContext applicationContext;

    public FlowWithSource importFlow(String tenantId, String source) {
        Flow withTenant = yamlFlowParser.parse(source, Flow.class).toBuilder()
            .tenantId(tenantId)
            .build();

        return flowRepository
            .findById(withTenant.getTenantId(), withTenant.getNamespace(), withTenant.getId())
            .map(previous -> flowRepository.update(withTenant, previous, source, taskDefaultService.injectDefaults(withTenant)))
            .orElseGet(() -> flowRepository.create(withTenant, source, taskDefaultService.injectDefaults(withTenant)));
    }

    public List<FlowWithSource> findByNamespaceWithSource(String tenantId, String namespace) {
        return flowRepository.findByNamespaceWithSource(tenantId, namespace);
    }

    public Stream<Flow> keepLastVersion(Stream<Flow> stream) {
        return keepLastVersionCollector(stream);
    }

    public List<String> deprecationPaths(Flow flow) {
        return deprecationTraversal("""", flow).toList();
    }

    private Stream<String> deprecationTraversal(String prefix, Object object) {
        if (object == null || ClassUtils.isPrimitiveOrWrapper(object.getClass()) || String.class.equals(object.getClass())) {
            return Stream.empty();
        }

        return Stream.concat(
            object.getClass().isAnnotationPresent(Deprecated.class) ? Stream.of(prefix) : Stream.empty(),
            allGetters(object.getClass())
                .flatMap(method -> {
                    try {
                        Object fieldValue = method.invoke(object);

                        if (fieldValue instanceof Iterable<?> iterableValue) {
                            fieldValue = StreamSupport.stream(iterableValue.spliterator(), false).toArray(Object[]::new);
                        }

                        String fieldName = method.getName().substring(3, 4).toLowerCase() + method.getName(). <SUF>4);
                        Stream<String> additionalDeprecationPaths = Stream.empty();
                        if (fieldValue instanceof Object[] arrayValue) {
                            additionalDeprecationPaths = IntStream.range(0, arrayValue.length).boxed().flatMap(i -> deprecationTraversal(fieldName + ""[%d]"".formatted(i), arrayValue[i]));
                        }

                        return Stream.concat(
                            method.isAnnotationPresent(Deprecated.class) && fieldValue != null ? Stream.of(prefix.isEmpty() ? fieldName : prefix + ""."" + fieldName) : Stream.empty(),
                            additionalDeprecationPaths
                        );
                    } catch (IllegalAccessException | InvocationTargetException e) {
                        // silent failure (we don't compromise the app / response for warnings)
                    }

                    return Stream.empty();
                })
        );
    }

    private Stream<Method> allGetters(Class<?> clazz) {
        return Arrays.stream(clazz.getMethods())
            .filter(m -> !m.getDeclaringClass().equals(Object.class))
            .filter(method -> method.getName().startsWith(""get"") && method.getName().length() > 3 && method.getParameterCount() == 0)
            .filter(method -> !method.getReturnType().equals(Void.TYPE))
            .filter(method -> !Modifier.isStatic(method.getModifiers()));
    }

    public Flow keepLastVersion(Stream<Flow> stream, String namespace, String flowId) {
        return keepLastVersionCollector(
            stream
                .filter(flow -> flow.getNamespace().equals(namespace) && flow.getId().equals(flowId))
        )
            .findFirst()
            .orElseThrow(() -> new IllegalStateException(""Unable to find flow '"" + namespace + ""."" + flowId + ""'""));
    }

    public Collection<Flow> keepLastVersion(List<Flow> flows) {
        return keepLastVersionCollector(flows.stream())
            .collect(Collectors.toList());
    }

    private Stream<Flow> keepLastVersionCollector(Stream<Flow> stream) {
        return stream
            .sorted((left, right) -> left.getRevision() > right.getRevision() ? -1 : (left.getRevision().equals(right.getRevision()) ? 0 : 1))
            .collect(Collectors.groupingBy(Flow::uidWithoutRevision))
            .values()
            .stream()
            .map(flows -> {
                Flow flow = flows.stream().findFirst().orElseThrow();

 <MID>",substring(,95,95,substring( <EOT>,0.3412771556458343,0.11362193664674995,0.25148668593658713,0.0,0.0
data/run_20231212_130935/test/69_IdUtils.java,../kestra/core/src/main/java/io/kestra/core/utils/IdUtils.java,"<PRE> package io.kestra.core.utils;

import com.devskiller.friendly_id.FriendlyId;
import com.google.common.base.Charsets;
import com.google.common.hash.HashFunction;
import com.google.common.hash.Hashing;

import java.util.Arrays;
import java.util.UUID;
import java.util.stream.Collectors;

@SuppressWarnings( <SUF>, ""UnstableApiUsage""})
abstract public class IdUtils {
    private static final HashFunction HASH_FUNCTION = Hashing.md5();
    private static final String ID_SEPARATOR = ""_"";

    public static String create() {
        return FriendlyId.createFriendlyId();
    }

    public static String from(String from) {
        return FriendlyId.toFriendlyId(
            UUID.nameUUIDFromBytes(
                HASH_FUNCTION.hashString(from, Charsets.UTF_8).asBytes()
            )
        );
    }

    public static String fromParts(String... parts) {
        return Arrays.stream(parts)
            .filter(part -> part != null)
            .collect(Collectors.joining(ID_SEPARATOR));
    }
}
 <MID>","{""deprecation""",12,12,".devskiller.friendly_id.FriendlyId;
import com.google.common.hash.HashFunction;
import com.google.common.hash.Hashing;

import java.util.Arrays;
import java.util.UUID;
import java.util.stream.Collectors;

@SuppressWarnings( <SU>, ""UnstableApiUsage""})
public class IdUtils {
    private static final HashFunction HASH_FUNCTION = Hashing.md5();
    private static final String ID_SEPARATOR = ""_"";

    public static String create() {
        return FriendlyId.createFriendlyId();
    }

    public static String from(String from) {
        return FriendlyId.toFriendlyId(
            UUID.nameUUIDFromBytes(
                HASH_FUNCTION.hashString(from, Charsets.UTF_8).asBytes()
            )
        );
    }

    public static String fromParts(String... parts) {
        return Arrays.stream(parts)
            .filter(part -> part",0.3633440038981558,0.0011219707590176126,0.11892071150027214,0.3333333333333333,0.0
data/run_20231212_130935/test/98_JdbcMapper.java,../kestra/jdbc/src/main/java/io/kestra/jdbc/JdbcMapper.java,"<PRE> package io.kestra.jdbc;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind <SUF>;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import io.kestra.core.serializers.JacksonMapper;

import java.io.IOException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public abstract class JdbcMapper {
    private static final DateTimeFormatter INSTANT_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"")
        .withZone(ZoneOffset.UTC);
    private static final DateTimeFormatter ZONED_DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"");
    private static ObjectMapper MAPPER;

    public static ObjectMapper of() {
        if (MAPPER == null) {
            MAPPER = JacksonMapper.ofJson().copy();

            final SimpleModule module = new SimpleModule();
            module.addSerializer(Instant.class, new JsonSerializer<>() {
                @Override
                public void serialize(Instant instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                    jsonGenerator.writeString(INSTANT_FORMATTER.format(instant));
                }
            });

            module.addSerializer(ZonedDateTime.class, new JsonSerializer<>() {
                @Override
                public void serialize(ZonedDateTime instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                    jsonGenerator.writeString(ZONED_DATE_TIME_FORMATTER.format(instant));
                }
            });

            MAPPER.registerModule(module);
        }

        return MAPPER;
    }
}
 <MID>",.JsonSerializer,4,4,".jackson.databind.ser.std.JsonSerializer;

public class JdbcMapper {
    private static final DateTimeFormatter INSTANT_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"")
        .withZone(ZoneOffset.UTC);
    private static final DateTimeFormatter ZONED_DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"");
    private static ObjectMapper MAPPER;

    public static ObjectMapper of() {
        if (MAPPER == null) {
            MAPPER = JacksonMapper.ofJson().copy();

            final SimpleModule module = new SimpleModule();
            module.addSerializer(Instant.class, new JsonSerializer<>() {
                @Override
                public void serialize(Instant instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                    jsonGenerator.writeString(INSTANT_FORMATTER.format(instant));
                }
            });

            module.addSerializer(",0.3135456363371469,0.0026958594120004486,0.25148668593658713,0.0,0.0
data/run_20231212_130935/test/67_StandAloneRunner.java,../kestra/core/src/main/java/io/kestra/core/runners/StandAloneRunner.java,"<PRE> package io.kestra.core.runners;

import io.kestra.core.models.executions.Execution;
import io.kestra.core.queues.QueueFactoryInterface;
import io.kestra.core.queues.QueueInterface;
import io.kestra.core.schedulers.AbstractScheduler;
import io.kestra.core.utils.ExecutorsUtils;
import io.micronaut.context.ApplicationContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;

import static io.kestra.core.utils.Rethrow.throwConsumer;

@Slf4j
public class StandAloneRunner implements RunnerInterface, AutoCloseable {
    @Setter private java.util.concurrent.ExecutorService poolExecutor;
    @Setter protected int workerThread = Math.max(3, Runtime.getRuntime().availableProcessors());
    @Setter protected boolean schedulerEnabled = true;
    @Setter protected boolean  <SUF> true;

    @Inject
    private ExecutorsUtils executorsUtils;

    @Inject
    @Named(QueueFactoryInterface.EXECUTION_NAMED)
    protected QueueInterface<Execution> executionQueue;

    @Inject
    @Named(QueueFactoryInterface.WORKERJOB_NAMED)
    protected QueueInterface<WorkerJob> workerTaskQueue;

    @Inject
    @Named(QueueFactoryInterface.WORKERTASKRESULT_NAMED)
    protected QueueInterface<WorkerTaskResult> workerTaskResultQueue;

    @Inject
    private ApplicationContext applicationContext;

    private final List<AutoCloseable> servers = new ArrayList<>();

    private boolean running = false;

    @Override
    public void run() {
        this.running = true;

        poolExecutor = executorsUtils.cachedThreadPool(""standalone-runner"");

        poolExecutor.execute(applicationContext.getBean(ExecutorInterface.class));

        if (workerEnabled) {
            Worker worker = new Worker(applicationContext, workerThread, null);
            applicationContext.registerSingleton(worker);
            poolExecutor.execute(worker);
            servers.add(worker);
        }

        if (schedulerEnabled) {
            AbstractScheduler scheduler = applicationContext.getBean(AbstractScheduler.class);
            poolExecutor.execute(scheduler);
            servers.add(scheduler);
        }

        if (applicationContext.containsBean(IndexerInterface.class)) {
            IndexerInterface indexer = applicationContext.getBean(IndexerInterface.class);
            poolExecutor.execute(indexer);
            servers.add(indexer);
        }
 <MID>",workerEnabled =,24,24,workerEnabled = <EOT>,0.3412771556458343,0.11362193664674995,0.25148668593658713,0.0,0.0
data/run_20231212_130935/test/98_JdbcMapper.java,../kestra/jdbc/src/main/java/io/kestra/jdbc/JdbcMapper.java,"<PRE> package io.kestra.jdbc;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind. <SUF>SimpleModule;
import io.kestra.core.serializers.JacksonMapper;

import java.io.IOException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public abstract class JdbcMapper {
    private static final DateTimeFormatter INSTANT_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"")
        .withZone(ZoneOffset.UTC);
    private static final DateTimeFormatter ZONED_DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"");
    private static ObjectMapper MAPPER;

    public static ObjectMapper of() {
        if (MAPPER == null) {
            MAPPER = JacksonMapper.ofJson().copy();

            final SimpleModule module = new SimpleModule();
            module.addSerializer(Instant.class, new JsonSerializer<>() {
                @Override
                public void serialize(Instant instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                    jsonGenerator.writeString(INSTANT_FORMATTER.format(instant));
                }
            });

            module.addSerializer(ZonedDateTime.class, new JsonSerializer<>() {
                @Override
                public void serialize(ZonedDateTime instant, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
                    jsonGenerator.writeString(ZONED_DATE_TIME_FORMATTER.format(instant));
                }
            });

            MAPPER.registerModule(module);
        }

        return MAPPER;
    }
}
 <MID>",module.,7,7,module. <EOT>,0.3412771556458343,0.11362193664674995,0.25148668593658713,0.0,0.0
data/run_20231212_130935/test/111_ExecutionFlowCondition.java,../kestra/core/src/main/java/io/kestra/core/models/conditions/types/ExecutionFlowCondition.java,"<PRE> package io.kestra.core.models.conditions.types;

import io.kestra.core.exceptions.IllegalConditionEvaluation;
import io.kestra.core.exceptions.InternalException;
import io.kestra.core.models.annotations.PluginProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.ToString;
import lombok.experimental.SuperBuilder;
import io.kestra.core.models.annotations.Example;
import io.kestra.core.models.annotations.Plugin;
import io.kestra.core.models.conditions.Condition;
import io.kestra.core.models.conditions.ConditionContext;

import javax.validation.constraints.NotNull;

@SuperBuilder
@ToString
@EqualsAndHashCode
@Getter
@NoArgsConstructor
@Schema(
    title = ""Condition for a specific flow of an execution""
)
@Plugin(
    examples = {
        @Example(
            full = true,
            code = {
                ""- conditions:"",
                ""    - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition"",
                ""      namespace: io.kestra.tests"",
                ""      flowId: my-current-flow""
            }
        )
    }
)
public class ExecutionFlowCondition extends Condition {
    @NotNull
     <SUF>(title = ""The namespace of the flow"")
    @PluginProperty
    private String namespace;

    @NotNull
    @Schema(title = ""The flow id"")
    @PluginProperty
    private String flowId;

    @Override
    public boolean test(ConditionContext conditionContext) throws InternalException {
        if (conditionContext.getExecution() == null) {
            throw new IllegalConditionEvaluation(""Invalid condition with execution null"");
        }

        return conditionContext.getExecution().getNamespace().equals(this.namespace) && conditionContext.getExecution().getFlowId().equals(this.flowId);
    }
}
 <MID>",@Schema,42,42,".kestra.core.models.conditions.types;

import io.kestra.core.models.conditions.Condition;
import io.kestra.core.models.conditions.ConditionContext;

@SuperBuilder
@ToString
@EqualsAndHashCode
@Getter
@NoArgsConstructor
@Schema(
    title = ""Condition for a specific flow of an execution""
)
@Plugin(
    examples = {
        @Example(
            full = true,
            code = {
                ""- conditions:"",
                ""    - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition"",
                ""      namespace: io.kestra.tests"",
                ""      flowId: my-current-flow""
            }
        )
    }
)
public class ExecutionFlowCondition extends Condition {
    @NotNull
    @Schema(title = ""The namespace of the flow"")
    @PluginProperty
    private String namespace;

    @NotNull
    @Schema(title = ""The flow id"")
    @PluginProperty
    private String flowId;
",0.3970190263104728,0.0032560859719707605,0.25148668593658713,0.3333333333333333,0.0
data/run_20231212_130935/test/77_VariableRenderer.java,../kestra/core/src/main/java/io/kestra/core/runners/VariableRenderer.java,"<PRE> package io.kestra.core.runners;

import com.github.jknack.handlebars.EscapingStrategy;
import com.github.jknack.handlebars.Handlebars;
import com.github.jknack.handlebars.HandlebarsException;
import com.github.jknack.handlebars.Template;
import com.github.jknack.handlebars.helper.*;
import io.kestra.core.exceptions.IllegalVariableEvaluationException;
import io.kestra.core.runners. <SUF>VariableRendererPlugins;
import io.kestra.core.runners.handlebars.helpers.*;
import io.kestra.core.runners.pebble.ExtensionCustomizer;
import io.kestra.core.runners.pebble.JsonWriter;
import io.kestra.core.runners.pebble.PebbleLruCache;
import io.micronaut.context.ApplicationContext;
import io.micronaut.context.annotation.ConfigurationProperties;
import io.micronaut.core.annotation.Nullable;
import io.pebbletemplates.pebble.PebbleEngine;
import io.pebbletemplates.pebble.error.AttributeNotFoundException;
import io.pebbletemplates.pebble.error.PebbleException;
import io.pebbletemplates.pebble.extension.AbstractExtension;
import io.pebbletemplates.pebble.template.PebbleTemplate;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import lombok.Getter;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Singleton
public class VariableRenderer {
    private static final Pattern RAW_PATTERN = Pattern.compile(""\\{%[-]*\\s*raw\\s*[-]*%\\}(.*?)\\{%[-]*\\s*endraw\\s*[-]*%\\}"");

    private Handlebars handlebars;
    private final PebbleEngine pebbleEngine;
    private final VariableConfiguration variableConfiguration;

    @SuppressWarnings(""unchecked"")
    @Inject
    public VariableRenderer(ApplicationContext applicationContext, @Nullable VariableConfiguration variableConfiguration) {
        this.variableConfiguration = variableConfiguration != null ? variableConfiguration : new VariableConfiguration();

        if (!this.variableConfiguration.getDisableHandlebars()) {
            this.handlebars = new Handlebars()
                .with(EscapingStrategy.NOOP)
                .registerHelpers(ConditionalHelpers.class)
                .registerHelpers(EachHelper.class)
                .registerHelpers(LogHelper.class)
                .registerHelpers(StringHelpers.class)
                .registerHelpers(OtherStringsHelper.class)
                .registerHelpers(UnlessHelper.class)
                .registerHelpers(WithHelper.class)
                .registerHelpers(DateHelper.class)
                .registerHelpers(JsonHelper.class)
                .registerHelpers(MiscHelper.class)
 <MID>",handlebars.,9,9,handlebars.Handlebars <EOT>,0.334455172018408,0.08633400213704504,0.25148668593658713,0.0,0.0
data/run_20231212_130935/test/63_WorkerTriggerResultQueueInterface.java,../kestra/core/src/main/java/io/kestra/core/queues/WorkerTriggerResultQueueInterface.java,"<PRE> package io.kestra.core.queues;

import io.kestra.core.exceptions.DeserializationException;
import io. <SUF>core.runners.WorkerTriggerResult;
import io.kestra.core.utils.Either;

import java.io.Closeable;
import java.util.function.Consumer;

/*
 * Required for the QueueFactory, to have common interface with JDBC & Kafka
 */
public interface WorkerTriggerResultQueueInterface extends Closeable {
    Runnable receive(String consumerGroup, Class<?> queueType, Consumer<Either<WorkerTriggerResult, DeserializationException>> consumer);

    void pause();

    void cleanup();
}
 <MID>",kestra.,4,4,kestra. <EOT>,0.3412771556458343,0.11362193664674995,0.25148668593658713,0.0,0.0
data/run_20231212_130935/test/104_StatsController.java,../kestra/webserver/src/main/java/io/kestra/webserver/controllers/StatsController.java,"<PRE> package io.kestra.webserver.controllers;

import io.kestra.core.models.executions.Execution;
import io.kestra.core.tenant.TenantService;
import io.micronaut.core.convert.format.Format;
import io.micronaut.http.MediaType;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Post;
import io.micronaut.scheduling.TaskExecutors;
import io.micronaut.scheduling.annotation.ExecuteOn;
import io.micronaut.validation.Validated;
import io.kestra.core.models.executions.statistics.DailyExecutionStatistics;
import io.kestra.core.repositories.ExecutionRepositoryInterface;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;
import io.micronaut.core.annotation.Nullable;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import jakarta.inject.Inject;

@Validated
@Controller(""/api/v1/stats"")
public class StatsController {
    @Inject
    protected ExecutionRepositoryInterface executionRepository;

    @Inject
    private TenantService tenantService;

    @ExecuteOn( <SUF>IO)
    @Post(uri = ""executions/daily"", produces = MediaType.TEXT_JSON)
    @Operation(tags = {""Stats""}, summary = ""Get daily statistics for executions"")
    public List<DailyExecutionStatistics> dailyStatistics(
        @Parameter(description = ""A string filter"") @Nullable String q,
        @Parameter(description = ""A namespace filter prefix"") @Nullable String namespace,
        @Parameter(description = ""A flow id filter"") @Nullable String flowId,
        @Parameter(description = ""The start datetime, default to now - 30 days"") @Nullable @Format(""yyyy-MM-dd'T'HH:mm[:ss][.SSS][XXX]"") ZonedDateTime startDate,
        @Parameter(description = ""The end datetime, default to now"") @Nullable @Format(""yyyy-MM-dd'T'HH:mm[:ss][.SSS][XXX]"") ZonedDateTime endDate
    ) {
        // @TODO: seems to be converted back to utc by micronaut
        return executionRepository.dailyStatistics(
            q,
            tenantService.resolveTenant(),
            namespace,
            flowId,
            startDate != null ? startDate.withZoneSameInstant(ZoneId.systemDefault()) : null,
            endDate != null ? endDate.withZoneSameInstant(ZoneId.systemDefault()) : null,
            null,
            false
        );
    }

    @ExecuteOn(TaskExecutors.IO)
    @Post(uri = ""taskruns/daily"", produces = MediaType.TEXT_JSON)
    @Operation(tags = {""Stats""}, summary = ""Get daily statistics for taskRuns"")
    public List<DailyExecutionStatistics> taskRunsDailyStatistics(
        @Parameter(description = ""A string filter"") @Nullable String q,
        @Parameter(description = ""A namespace filter prefix"") @Nullable String namespace,
        @Parameter(description = ""A flow id filter"") @Nullable String flowId,
        @Parameter(description = ""The start datetime, default to now - 30 days"") @Nullable @Format(""yyyy-MM-dd'T'HH:mm[:ss][.SSS][XXX]"") ZonedDateTime startDate,
        @Parameter(description = ""The end datetime, default to now"") @Nullable @Format(""yyyy-MM-dd'T'HH:mm[:ss][.SSS][XXX]"") ZonedDateTime endDate
    ) {
        return executionRepository.dailyStatistics(
            q,
            tenantService.resolveTenant(),
            namespace,
            flowId,
            startDate != null ? startDate.withZoneSameInstant(ZoneId.systemDefault()) : null,
            endDate != null ? endDate.withZoneSameInstant(ZoneId.systemDefault()) : null,
            null,
            true
        );
    }

    @ExecuteOn(TaskExecutors.IO)
    @Post(uri = ""executions/daily/group-by-flow"", produces = MediaType.TEXT_JSON)
    @Operation(tags = {""Stats""}, summary = ""Get daily statistics for executions group by namespaces and flows"")
    public Map<String, Map<String, List<DailyExecutionStatistics>>> dailyGroupByFlowStatistics(
        @Parameter(description = ""A string filter"") @Nullable String q,
 <MID>",TaskExecutors.,33,33,"TaskExecutors.IO)
    @Post(uri = ""executions/count"", produces = MediaType.TEXT_PLAIN)
    @Operation(tags = {""Stats""}, summary = ""Get executions count"")
    public Long count(
        @Parameter(description = ""A string filter"") @Nullable String q,
        @Parameter(description = ""A namespace filter prefix"") @Nullable String namespace,
        @Parameter(description = ""A flow id filter"") @Nullable String flowId
    ) {
        return executionRepository.count(
            q,
            tenantService.resolveTenant(),
            namespace,
            flowId
        );
    }

    @ExecuteOn(TaskExecutors.IO)
    @Post(uri = ""executions/count/by-status"", produces = MediaType.TEXT_PLAIN)
    @Operation(tags = {""Stats""}, summary = ""Get executions count by status"")
    public Map<Execution.Status, Long> countByStatus(
        @Parameter(description = ""A string filter"") @Nullable String q,
        @Parameter(description = ""A namespace filter",,,,,
